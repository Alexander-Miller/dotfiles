#+STARTUP: overview
#+STARTUP: hideblocks

* Utility Functions
** a/what-face

#+BEGIN_SRC emacs-lisp
  (defun a/what-face (point)
    "Reveal face at POINT."
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" point))))
  (global-set-key (kbd "C-x ö") #'a/what-face)
#+END_SRC

** a/what-major-mode

#+BEGIN_SRC emacs-lisp
  (defun a/what-major-mode ()
    "Reveal current major mode."
    (interactive)
    (message "%s" major-mode))
  (global-set-key (kbd "C-x ä") #'a/what-major-mode)
#+END_SRC

** a/edit-org-user-config

#+BEGIN_SRC emacs-lisp
  (defun a/edit-org-user-config ()
    "Edit the org user config file, in the current window."
    (interactive)
    (find-file-existing (concat (getenv "SPACEMACSDIR") "/user-config.org")))

  (evil-leader/set-key
    "feo" #'a/edit-org-user-config)
#+END_SRC

** a/def-key-for-maps

#+BEGIN_SRC emacs-lisp
(defun a/def-key-for-maps (key cmd keymaps)
  "Bind KEY to CMD for all keymaps in MAPS."
  (dolist (keymap keymaps)
    (define-key keymap key cmd)))
#+END_SRC

** a/eval-last-sexp

#+BEGIN_SRC emacs-lisp
  (defun a/eval-last-sexp ()
    (interactive)
    (if (and (evil-normal-state-p)
             (string= ")" (string (or (char-after) 0))))
        (save-excursion
          (forward-char)
          (call-interactively 'eval-last-sexp))
      (call-interactively 'eval-last-sexp)))

  (global-set-key (kbd "C-x C-e") #'a/eval-last-sexp)
  (spacemacs/set-leader-keys-for-major-mode 'emacs-lisp-mode
    "ee" #'a/eval-last-sexp)
#+END_SRC

** a/org-files

#+BEGIN_SRC emacs-lisp
  (defun a/org-files ()
    (interactive)
    (helm :prompt "Org File: "
          :buffer "*helm org files*"
          :sources (helm-build-sync-source "Org Files"
                     :candidates (--map (cons (f-filename it) it) (f-files org-directory))
                     :action #'find-file
                     :filtered-candidate-transformer 'helm-fuzzy-highlight-matches)))
  (spacemacs/set-leader-keys
    "aof" #'a/org-files)
#+END_SRC

** a/evil-paste

As shown in the spacemacs FAQ
#+BEGIN_SRC emacs-lisp
  (defun a/evil-paste ()
    (interactive)
    (let ((evil-this-register ?0))
      (call-interactively 'evil-paste-after)))

  (define-key evil-visual-state-map "p" #'a/evil-paste)
#+END_SRC

* Layer configurations
** Evil
*** Fitting cursor state colors

#+BEGIN_SRC emacs-lisp
  (setq
   evil-normal-state-cursor   '("#ab3737" box)
   evil-insert-state-cursor   '("#33aa33" bar)
   evil-visual-state-cursor   '("#a374a8" box)
   evil-motion-state-cursor   '("#c97449" box)
   evil-operator-state-cursor '("#00688b" (hbar . 5))
   evil-emacs-state-cursor    '("#339999" bar)
   evil-resize-state-cursor   '("#ffdb1a" box))
#+END_SRC

*** kj key-chord

#+BEGIN_SRC emacs-lisp
  (setq-default evil-escape-key-sequence "kj")
#+END_SRC

*** Settings

#+BEGIN_SRC emacs-lisp
  (setq evil-move-beyond-eol t
        evil-want-fine-undo  t)
#+END_SRC

** Auto Completion
*** Global Activation

#+BEGIN_SRC emacs-lisp
  (global-company-mode t)
#+END_SRC

*** Settings
**** Company Settings

#+BEGIN_SRC emacs-lisp
  (setq
   company-abort-manual-when-too-short t
   company-auto-complete               nil
   company-async-timeout               10
   company-dabbrev-code-ignore-case    nil
   company-dabbrev-downcase            nil
   company-dabbrev-ignore-case         nil
   company-etags-ignore-case           nil
   company-idle-delay                  10
   company-minimum-prefix-length       2
   company-require-match               nil
   company-selection-wrap-around       t
   company-show-numbers                t
   company-tooltip-flip-when-above     nil)
#+END_SRC

**** Tooltip

The tooltip will look vastly better if we set a minimum width and properly align annotations.
#+BEGIN_SRC emacs-lisp
  (setq
   company-tooltip-minimum-width              70
   company-tooltip-align-annotations          t
   company-tooltip-margin                     2)
#+END_SRC

*** Backend Priority

The completions provided by combined backends should be sorted, so as to avoid
interspersing semantic completion candidates with dumb code-dabbrevs
#+BEGIN_SRC emacs-lisp
  (defconst a/backend-priorities
    '((company-anaconda     . 0)
      (company-capf         . 6)
      (company-yasnippet    . 7)
      (company-keywords     . 8)
      (company-files        . 9)
      (company-dabbrev-code . 10)
      (company-dabbrev      . 11))
    "Alist of backends' priorities.  Smaller number means higher priority.")

  (defun a/priority-of-backend (backend)
    "Will retrieve priority of BACKEND.  Defauts to -1 if no priority is defined.
  Hence only the less important backends neet to be explicitly marked."
    (let ((pr (cdr (assoc backend a/backend-priorities))))
      (if (null pr) -1 pr)))

  (defun a/company-sort-by-backend-priority (candidates)
    "Will sort completion CANDIDATES according to their priorities.
  In case of equal priorities lexicographical ordering is used.
  Duplicate candidates will be removed as well."
    (sort (delete-dups candidates)
          (lambda (c1 c2)
            (let* ((b1 (get-text-property 0 'company-backend c1))
                   (b2 (get-text-property 0 'company-backend c2))
                   (diff (- (a/priority-of-backend b1) (a/priority-of-backend b2))))
              (if (= diff 0)
                  nil
                (if (< 0 diff) nil t))))))
#+END_SRC

The priority sorting is only used in major modes which use combined backends
#+BEGIN_SRC emacs-lisp
  (defun a/use-completions-priority-sorting ()
    (setq-local company-transformers '(company-flx-transformer company-sort-by-occurrence a/company-sort-by-backend-priority)))

  (add-hook 'rust-mode-hook #'a/use-completions-priority-sorting)
#+END_SRC

*** Quickhelp

Quickhelp makes company's modemaps unreliable, so we rewrite the underlying keymap while company is active
#+BEGIN_SRC emacs-lisp
  (defun a/company-off (arg)
    "Use default keys when company is not active. ARG is ignored."
    (a/def-key-for-maps
     (kbd "C-j") #'electric-newline-and-maybe-indent
     (list evil-normal-state-map evil-insert-state-map))
    (a/def-key-for-maps
     (kbd "C-k") #'kill-line
     (list evil-normal-state-map evil-insert-state-map))
     (a/def-key-for-maps
      (kbd "C-l") #'yas-expand
      (list evil-insert-state-map)))

  (defun a/company-on (arg)
    "Use company's keys when company is active.
  Necessary due to company-quickhelp using global key maps.
  ARG is ignored."
    (a/def-key-for-maps
     (kbd "C-j") #'company-select-next
     (list evil-normal-state-map evil-insert-state-map))
    (a/def-key-for-maps
     (kbd "C-k") #'company-select-previous
     (list evil-normal-state-map evil-insert-state-map))
    (a/def-key-for-maps
     (kbd "C-l") #'company-quickhelp-manual-begin
     (list evil-insert-state-map)))

  (add-hook 'company-completion-started-hook   #'a/company-on)
  (add-hook 'company-completion-finished-hook  #'a/company-off)
  (add-hook 'company-completion-cancelled-hook #'a/company-off)

  (define-key company-active-map (kbd "C-l") #'company-quickhelp-manual-begin)
#+END_SRC

*** Company Flx

#+BEGIN_SRC emacs-lisp
  (company-flx-mode t)
  (setq company-flx-limit 400)
#+END_SRC

*** Bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-SPC") #'company-complete)
  (global-set-key (kbd "C-@") #'company-complete)
#+END_SRC

** Org
*** Functions

~org-switch-to-buffer-other-window~
Org thinks it's a good idea to disable ~display-buffer-alist~ when displaying its buffers. I don't.
I want my buffers' display behaviour to be handled by shackle. All of them. No exceptions.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (defun org-switch-to-buffer-other-window (&rest args)
      "Same as the original, but lacking the wrapping
  call to `org-no-popups'"
      (apply 'switch-to-buffer-other-window args)))
#+END_SRC

~a/org--capture-std-target~
#+BEGIN_SRC  emacs-lisp
  (with-eval-after-load 'org
    (defun a/org-capture-std-target ()
      `(file+headline
        ,(concat org-directory "Capture.org")
        ,(if (s-equals? (system-name) "a-laptop")
             "Ideen"
           "Postfach"))))
#+END_SRC

*** Settings
**** Prerequisites

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq-default org-directory          "~/Dropbox/Org/"
                  org-default-notes-file (concat org-directory "Capture.org")))
#+END_SRC

**** Additional modules

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (add-to-list 'org-modules 'org-habit)
    (require 'org-habit))
#+END_SRC

**** Better looking TODO keywords

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq-default org-todo-keywords '((sequence "[TODO]" "|" "[DONE]"))))
#+END_SRC

**** No `special` behaviour.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
      (setq
       org-special-ctrl-a         nil
       org-special-ctrl-k         nil
       org-special-ctrl-o         nil
       org-special-ctrl-a/e       nil
       org-ctrl-k-protect-subtree nil))
#+END_SRC

**** Agenda

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org-agenda

    (add-to-list 'org-agenda-files (concat org-directory "NT.org"))

    (pcase (system-name)
      ("a-laptop"  (add-to-list 'org-agenda-files (concat org-directory "Privat.org")))
      ("nt-laptop" (message "TODO")))

    (setq
     org-agenda-skip-scheduled-if-deadline-is-shown t
     org-agenda-span                                14
     org-agenda-window-frame-fractions              '(0.7 . 0.7)
     org-agenda-window-setup                        'current-window
     org-deadline-warning-days                      10
     org-extend-today-until                         2))
#+END_SRC

**** Habits

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org-habit
    (setq org-habit-graph-column 70
          org-habit-show-habits-only-for-today nil))
#+END_SRC

**** Bullets

Use only one bullet for headings (original = "◉" "○" "✸" "✿")
 #+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'org
     (setq-default org-bullets-bullet-list '("✸")))
 #+END_SRC

Also use ascii bullets for simple lists
#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords
   'org-mode
   '(("^ +\\([-*]\\) " (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+END_SRC

**** Capture

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (setq org-capture-templates
          `(("t" "Idee/Todo" entry
             ,(a/org-capture-std-target)
             "** [TODO] %?\n %U"))))
#+END_SRC

**** Other/Sort later

#+BEGIN_SRC emacs-lisp
  (setq
   calendar-date-style            'european
   org-tags-column                85
   org-src-window-setup           'other-window
   org-log-done                   'time
   org-startup-align-all-tables   t
   org-startup-indented           t
   org-log-into-drawer            t
   org-startup-folded             t
   org-table-use-standard-references nil
   org-cycle-emulate-tab          t
   org-cycle-global-at-bob        nil
   org-M-RET-may-split-line       nil
   org-fontify-whole-heading-line nil
   org-catch-invisible-edits      'error
   org-refile-targets             '((nil . (:maxlevel . 10)))
   org-footnote-auto-adjust       t)

  (setq-default
   org-display-custom-times nil
   ;; org-time-stamp-formats   '("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>")
   )
  ;;  org-catch-invisible-edits      'show
  ;;  org-fontify-whole-heading-line nil
  ;;  ;; org-hide-block-overlays
  ;;  org-hide-emphasis-markers      t
  ;;  org-list-indent-offset         1
  ;;  org-list-allow-alphabetical    nil
  ;;  org-src-fontify-natively       t
  ;;  org-startup-folded             t
#+END_SRC

*** Babel Languages

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python     . t)
       (shell      . t)))
#+END_SRC

*** Font Locking

A small bit of custom font locking for '==>'
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org

    (defface a/result-face
      `((t (:foreground "#44aa44" :bold t)))
      "Face for '==>'.")

    (defun a/org-custom-font-lock ()
      (interactive)
      (font-lock-add-keywords
       'org-mode
       '(("==>" . 'a/result-face))))

    (defun a/org-mode-hook ()
      (a/org-custom-font-lock))

    (add-hook 'org-mode-hook #'a/org-mode-hook))
#+END_SRC

*** Keybinds
**** Showing content

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "rr" #'org-reveal
      "rb" #'outline-show-branches
      "rc" #'outline-show-children
      "ra" #'outline-show-all))
#+END_SRC

**** Headline Navigation

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "u"   #'outline-up-heading
      "M-u" #'helm-org-parent-headings
      "j"   #'outline-next-visible-heading
      "k"   #'outline-previous-visible-heading
      "C-j" #'org-forward-heading-same-level
      "C-k" #'org-backward-heading-same-level))
#+END_SRC

**** Scheduling

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "s"  nil
      "ss" #'org-schedule
      "st" #'org-time-stamp
      "sd" #'org-deadline))
#+END_SRC

**** (Sub)Tree

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "wi" #'org-tree-to-indirect-buffer
      "wm" #'org-mark-subtree
      "wd" #'org-cut-subtree
      "wy" #'org-copy-subtree
      "wY" #'org-clone-subtree-with-time-shift
      "wp" #'org-paste-subtree
      "wr" #'org-refile))
#+END_SRC

**** Structure Editing

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (dolist (mode '(normal insert))
      (evil-define-key mode org-mode-map
        (kbd "M-h") #'org-metaleft
        (kbd "M-l") #'org-metaright
        (kbd "M-j") #'org-metadown
        (kbd "M-k") #'org-metaup
        (kbd "M-H") #'org-shiftmetaleft
        (kbd "M-L") #'org-shiftmetaright
        (kbd "M-J") #'org-shiftmetadown
        (kbd "M-K") #'org-shiftmetaup
        (kbd "M-t") #'org-insert-todo-heading-respect-content)))
#+END_SRC

**** Sparse Trees

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "7"   #'org-sparse-tree
      "8"   #'org-occur
      "M-j" #'next-error
      "M-k" #'previous-error))
#+END_SRC

**** Narrowing

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    ;;Spacemancs default *,n* needs to be removed first
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "n" nil)

    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "nb" #'org-narrow-to-block
      "ne" #'org-narrow-to-element
      "ns" #'org-narrow-to-subtree
      "nw" #'widen))
#+END_SRC

**** Insert Commands

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "if" #'org-footnote-new
      "il" #'org-insert-link
      "in" #'org-add-note
      "id" #'org-insert-drawer
      "iD" #'org-insert-property-drawer))
#+END_SRC

**** Tables

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (defun a/org-table-recalc ()
      "Reverse the prefix arg bevaviour of `org-table-recalculate', such that
  by default the entire table is recalculated, while with a prefix arg recalculates
  only the current cell."
      (interactive)
      (setq current-prefix-arg (not current-prefix-arg))
      (call-interactively #'org-table-recalculate))

    (defun a/org-table-switch-right ()
      "Switch content of current table cell with the cell to the right."
      (interactive)
      (when (org-at-table-p)
        (a/org-table-switch (org-table-current-line) (1+ (org-table-current-column)))))

    (defun a/org-table-switch-left ()
      "Switch content of current table cell with the cell to the left."
      (interactive)
      (when (org-at-table-p)
        (a/org-table-switch (org-table-current-line) (1- (org-table-current-column)))))

    (defun a/org-table-switch (x2 y2)
      (let* ((p  (point))
             (x1 (org-table-current-line))
             (y1 (org-table-current-column))
             (t1 (org-table-get x1 y1))
             (t2 (org-table-get x2 y2)))
        (org-table-put x1 y1 t2)
        (org-table-put x2 y2 t1 t)
        (goto-char p)))

    ;; TODO: rebind clock
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "q" nil)

    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "qt"  #'org-table-create-or-convert-from-region
      "qb"  #'org-table-blank-field
      "qd"  #'org-table-delete-column
      "qc"  #'org-table-insert-column
      "qr"  #'org-table-insert-row
      "q-"  #'org-table-insert-hline
      "q0"  #'org-table-sort-lines
      "qy"  #'org-table-copy-region
      "qx"  #'org-table-cut-region
      "qp"  #'org-table-paste-rectangle
      "qo"  #'org-table-toggle-coordinate-overlays
      "qf"  #'a/org-table-recalc
      "q#"  #'org-table-rotate-recalc-marks
      "qg"  #'org-plot/gnuplot
      "qsl" #'a/org-table-switch-right
      "qsh" #'a/org-table-switch-left)

    (evil-leader/set-key-for-mode 'org-mode
      "+" #'org-table-sum
      "?" #'org-table-field-info))
#+END_SRC

**** Toggles

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "zh" #'org-toggle-heading
      "zl" #'org-toggle-link-display
      "zx" #'org-toggle-checkbox
      "zc" #'org-toggle-comment
      "zt" #'org-toggle-tag
      "zi" #'org-toggle-item
      "zo" #'org-toggle-ordered-property))
#+END_SRC

**** Other

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (spacemacs/set-leader-keys-for-major-mode 'org-mode
      "0"   #'org-sort
      "#"   #'org-update-statistics-cookies
      "C-y" #'org-copy-visible
      "C-p" #'org-set-property
      "C-f" #'org-footnote-action
      "C-o" #'org-open-at-point
      "C-e" #'org-edit-special
      "C-t" #'org-todo
      "P"   #'org-priority)

      (evil-define-key 'normal org-mode-map
        "-" #'org-cycle-list-bullet)

      (define-key org-src-mode-map (kbd "C-c C-c") #'org-edit-src-exit))
#+END_SRC

***** TODO helm-org-in-buffer-heading
to be redirected from helm-semantic-or-imenu @ SPC h i
** Shell Scripts

Company-shell settings
#+BEGIN_SRC emacs-lisp
  (setq
   company-shell-delete-duplicates nil
   company-shell-modes             nil
   company-fish-shell-modes        nil
   company-shell-use-help-arg      t)
#+END_SRC

** Helm
*** Functions

~a/org-helm-headings~
#+BEGIN_SRC emacs-lisp
  ;; needs to be loaded to make `helm-source-org-headings-for-files' available
  (require 'helm-org)

  (defun a/org-in-buffer-headings ()
    "Slightly retooled ~helm-org-in-buffer-headings~ to have the candidates retain their fontification."
    (interactive)
    (helm :sources (helm-source-org-headings-for-files
                    (list (current-buffer)))
          :candidate-number-limit 99999
          :preselect (helm-org-in-buffer-preselect)
          :truncate-lines helm-org-truncate-lines
          :buffer "*helm org inbuffer*"))
#+END_SRC

~a/helm-semantic-or-imenu~
#+BEGIN_SRC emacs-lisp
  (defun a/helm-semantic-or-imenu ()
      "Same as `helm-semantic-or-imenu', but will call `a/org-helm-headings' in org-mode buffers."
      (interactive)
      (if (eq major-mode 'org-mode)
          (a/org-in-buffer-headings)
        (call-interactively #'helm-semantic-or-imenu)))
#+END_SRC

*** Keybinds

#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys
    "hi" #'a/helm-semantic-or-imenu)
#+END_SRC

** Rust
*** Functions

Rebuild tags
#+BEGIN_SRC emacs-lisp
  (defun a/rusty-rebuild-tags ()
    (interactive)
    (make-thread
     #'(lambda ()
         (let ((default-directory (projectile-project-root)))
           (call-process-shell-command "rusty-tags emacs")
           (call-process-shell-command "mv rusty-tags.emacs TAGS")
           (message "Rusty tags rebuilt.")))))
#+END_SRC

*** Keybinds

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "racer"
    (evil-define-key 'normal racer-mode-map      (kbd "M-.") #'racer-find-definition)
    (evil-define-key 'insert racer-mode-map      (kbd "M-.") #'racer-find-definition)
    (evil-define-key 'normal racer-help-mode-map (kbd "q")   #'kill-buffer-and-window)

    (spacemacs/set-leader-keys-for-major-mode 'rust-mode
      "f"   #'rust-format-buffer
      "a"   #'rust-beginning-of-defun
      "e"   #'rust-end-of-defun
      "d"   #'racer-describe
      "C-t" #'a/rusty-rebuild-tags))
#+END_SRC

*** Settings

Add *company-dabbrev-code* to front row of completion backends.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "rust-mode"
    (setq company-backends-rust-mode
          '((company-capf :with company-dabbrev-code company-yasnippet)
            (company-dabbrev-code company-gtags company-etags company-keywords :with company-yasnippet)
            (company-files :with company-yasnippet)
            (company-dabbrev :with company-yasnippet))))
#+END_SRC

** Projectile
*** Functions

~a/projectile-magit-status~
#+BEGIN_SRC emacs-lisp
  (defun a/projectile-magit-status (&optional arg)
    "Use projectile with Helm for running `magit-status'

    With a prefix ARG invalidates the cache first."
       (interactive "P")
       (if (projectile-project-p)
           (projectile-maybe-invalidate-cache arg))
       (let ((helm-ff-transformer-show-only-basename nil)
             (helm-boring-file-regexp-list           nil))
         (helm :prompt "Git status in project: "
               :buffer "*helm projectile*"
               :sources (helm-build-sync-source "Projectile Projects"
                          :candidates projectile-known-projects
                          :action #'magit-status
                          :filtered-candidate-transformer 'helm-fuzzy-highlight-matches))))
#+END_SRC

*** Keybinds

#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys
    "pg"  nil
    "pt"  #'projectile-find-tag
    "psa" #'helm-projectile-ag
    "pgs" #'a/projectile-magit-status)
#+END_SRC

*** Settings

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'projectile
    (setq projectile-switch-project-action #'project-find-file))
#+END_SRC

** Flycheck
*** Settings

#+BEGIN_SRC emacs-lisp
  (setq
   flycheck-check-syntax-automatically '(mode-enabled save idle-change)
   flycheck-idle-change-delay          10
   flycheck-pos-tip-timeout            999)
#+END_SRC

*** Keybinds

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "flycheck"

    (evil-leader/set-key
      "ee"    #'flycheck-buffer
      "e C-e" #'flycheck-mode)

    (define-key evil-normal-state-map (kbd "C-.") #'spacemacs/next-error)
    (define-key evil-normal-state-map (kbd "C-,") #'spacemacs/previous-error))
#+END_SRC

** Helm
*** Settings

#+BEGIN_SRC emacs-lisp
   (setq
    helm-ag-base-command              "ag -f --hidden --nocolor --nogroup --depth 999999 --smart-case --recurse"
    helm-move-to-line-cycle-in-source t)
#+END_SRC

*** Keybinds

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "helm"

    (evil-leader/set-key
      "saa" #'helm-do-ag-this-file)

    (define-key helm-map (kbd "M-j") #'helm-next-source)
    (define-key helm-map (kbd "M-k") #'helm-previous-source))
#+END_SRC

** Version Control
*** Settings

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "magit"
    (setq
     git-commit-summary-max-length 120
     magit-diff-highlight-hunk-region-functions
     '(magit-diff-highlight-hunk-region-dim-outside)))
#+END_SRC

*** Keybinds

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "magit"
    (defvar a/magit-key-maps
      (list
       magit-mode-map
       magit-status-mode-map
       magit-log-mode-map
       magit-diff-mode-map
       magit-branch-section-map
       magit-untracked-section-map
       magit-file-section-map
       magit-status-mode-map
       magit-hunk-section-map
       magit-stash-section-map
       magit-stashes-section-map
       magit-staged-section-map
       magit-unstaged-section-map))

    (a/def-key-for-maps (kbd "J")   #'a/quick-forward                 a/magit-key-maps)
    (a/def-key-for-maps (kbd "K")   #'a/quick-backward                a/magit-key-maps)
    (a/def-key-for-maps (kbd "M-j") #'magit-section-forward-sibling   a/magit-key-maps)
    (a/def-key-for-maps (kbd "M-k") #'magit-section-backward-sibling  a/magit-key-maps)
    (a/def-key-for-maps (kbd ",u")  #'magit-section-up                a/magit-key-maps)
    (a/def-key-for-maps (kbd ",1")  #'magit-section-show-level-1-all  a/magit-key-maps)
    (a/def-key-for-maps (kbd ",2")  #'magit-section-show-level-2-all  a/magit-key-maps)
    (a/def-key-for-maps (kbd ",3")  #'magit-section-show-level-3-all  a/magit-key-maps)
    (a/def-key-for-maps (kbd ",4")  #'magit-section-show-level-4-all  a/magit-key-maps))
#+END_SRC

** Elm
*** Functions

#+BEGIN_SRC emacs-lisp
  (defun a/format-and-save-elm-buffer ()
    "Format an elm buffer and then save it."
    (interactive)
    (elm-mode-format-buffer)
    (save-buffer))
#+END_SRC

*** Settings

#+BEGIN_SRC emacs-lisp
  (defun a/elm-mode-hook ()
    (setq-local company-backends
                '((company-elm company-dabbrev-code company-files :with company-yasnippet))))

  (add-hook 'elm-mode-hook #'a/elm-mode-hook t)
#+END_SRC

*** Keybinds

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'elm-mode
    (spacemacs/set-leader-keys-for-major-mode 'elm-mode
      "R"   nil
      "h"   nil
      "="   nil
      "em"  #'elm-preview-main
      "eb"  #'elm-preview-buffer
      "d"   #'elm-oracle-doc-at-point
      "t"   #'elm-oracle-type-at-point
      "=="  #'elm-mode-format-buffer
      "C-t" #'elm-mode-generate-tags)

    (which-key-add-major-mode-key-based-replacements 'elm-mode
      ",e" "preview")

    (spacemacs/set-leader-keys
      "fs" #'a/format-and-save-elm-buffer)

    (define-key elm-package-mode-map (kbd "J")       #'a/quick-forward)
    (define-key elm-package-mode-map (kbd "K")       #'a/quick-backward)
    (define-key elm-package-mode-map (kbd "q")       #'kill-buffer-and-window)
    (define-key elm-mode-map         (kbd "C-x C-s") #'a/format-and-save-elm-buffer)
    (define-key elm-mode-map         (kbd "M-.")     #'elm-mode-goto-tag-at-point))
#+END_SRC

* Single Package Configurations
** dired+

dired+ needs to be explicitly required for whatever reason
#+BEGIN_SRC emacs-lisp
(require 'dired+)
#+END_SRC

** Eyebrowse

Switch desktops via SPC + num
#+BEGIN_SRC emacs-lisp
  (eyebrowse-mode t)
  (dolist (num (number-sequence 0 9))
    (let ((key  (kbd (concat "SPC " (number-to-string num))))
          (func (intern (concat "eyebrowse-switch-to-window-config-" (number-to-string num)))))
      (spacemacs/set-leader-keys key func)))
#+END_SRC

** Shackle

Replace popwin
#+BEGIN_SRC emacs-lisp
  (shackle-mode t)

  (setq helm-display-function 'pop-to-buffer)

  (setq shackle-rules
        '((magit-status-mode        :same   t)
          ("*helm-ag*"              :select t   :align right :size 0.5)
          ("*helm semantic/imenu*"  :select t   :align right :size 0.4)
          (flycheck-error-list-mode :select nil :align below :size 0.25)
          (racer-help-mode          :select t   :align right :size 0.5)
          (help-mode                :select t   :align right :size 0.5)
          (magit-diff-mode          :select nil :align right :size 0.5)
          (compilation-mode         :select t   :align right :size 0.5)
          ("*Org Select*"           :select t   :align below :size 0.33)
          ("*Org Note*"             :select t   :align below :size 0.33)
          (" *Org todo*"            :select t   :align below :size 0.2)
          ("*Man.*"                 :select t   :align below :size 0.5  :regexp t)
          ("*helm.*"                :select t   :align below :size 0.33 :regexp t)
          ("*Org Src.*"             :select t   :align below :size 0.5  :regexp t)))
#+END_SRC

** Yasnippet
*** Keybinds

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "yasnippet"
    (define-key evil-insert-state-map (kbd "C-l") #'yas-expand))
#+END_SRC

** i3wm-config-mode

#+BEGIN_SRC emacs-lisp
  (require 'i3wm-config-mode)
#+END_SRC

** Writeroom mode

#+BEGIN_SRC emacs-lisp
  (spacemacs|add-toggle writeroom
    :mode writeroom-mode
    :documentation "Disable visual distractions."
    :evil-leader "TW")

  (with-eval-after-load 'writeroom-mode
    (setq writeroom-width              100
          writeroom-extra-line-spacing 0))
#+END_SRC

* Modeline

Turn off unwanted segments
#+BEGIN_SRC emacs-lisp
  (spacemacs/toggle-mode-line-minor-modes-off)
  (spaceline-toggle-purpose-off)
#+END_SRC

Don't use Spacemacs' evil state highlighter
#+BEGIN_SRC emacs-lisp
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
#+END_SRC

* Misc. Settings
** General Key Binds

Use visual lines
#+BEGIN_SRC emacs-lisp
  (a/def-key-for-maps
   (kbd "j") #'evil-next-visual-line
   (list evil-normal-state-map evil-visual-state-map evil-motion-state-map))
  (a/def-key-for-maps
   (kbd "k") #'evil-previous-visual-line
   (list evil-normal-state-map evil-visual-state-map evil-motion-state-map))
#+END_SRC

Quick line jumping
#+BEGIN_SRC emacs-lisp
  (defun a/quick-forward ()
    (interactive) (evil-next-visual-line 5))

  (defun a/quick-backward ()
    (interactive) (evil-previous-visual-line 5))

  (dolist (map (list evil-normal-state-map evil-visual-state-map evil-motion-state-map))
    (define-key map (kbd "J") #'a/quick-forward))

  (dolist (map (list evil-normal-state-map evil-visual-state-map evil-motion-state-map))
    (define-key map (kbd "K") #'a/quick-backward))
#+END_SRC

Emacs style line start/end jump
#+BEGIN_SRC emacs-lisp
  (dolist (map (list evil-motion-state-map evil-normal-state-map evil-visual-state-map evil-insert-state-map))
    (define-key map (kbd "C-e") #'evil-end-of-visual-line))

  (dolist (map (list evil-motion-state-map evil-normal-state-map evil-visual-state-map evil-insert-state-map))
    (define-key map (kbd "C-a") #'evil-beginning-of-visual-line))
#+END_SRC

Evil search on emacs' buttons
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") #'evil-search-forward)
  (global-set-key (kbd "C-r") #'evil-search-backward)
#+END_SRC

Splitting and joining lines
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "C-j") #'electric-newline-and-maybe-indent)
  (evil-leader/set-key "C-j" #'evil-join)
#+END_SRC

Dumb Refactoring
#+BEGIN_SRC emacs-lisp
  (defun a/defun-query-replace ()
    (interactive)
    (mark-defun)
    (call-interactively 'anzu-query-replace))

  (evil-leader/set-key
    "üü" #'anzu-query-replace
    "üd" #'a/defun-query-replace)
#+END_SRC

Evil smart doc lookup
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x ß") #'spacemacs/evil-smart-doc-lookup)
#+END_SRC

Find definition
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-.") #'xref-find-definitions)
  (define-key evil-normal-state-map (kbd "M-.") #'xref-find-definitions)
#+END_SRC

Quitting with *q*
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal messages-buffer-mode-map (kbd "q") #'quit-window)
  (define-key flycheck-error-list-mode-map (kbd "q") #'kill-buffer-and-window)
  (with-eval-after-load 'Man-mode
    (define-key Man-mode-map (kbd "q") #'kill-buffer-and-window))
#+END_SRC

Killing a buffer alongside its window
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "b C-d" #'kill-buffer-and-window)
#+END_SRC

** Smooth Scrolling

No more jumpy recenter
#+BEGIN_SRC emacs-lisp
(setq
  scroll-conservatively           99
  scroll-margin                   10
  scroll-preserve-screen-position t)
#+END_SRC

** Minor modes
*** On/Off Switches

On
#+BEGIN_SRC emacs-lisp
  (global-subword-mode t)
  (blink-cursor-mode t)
  (mouse-avoidance-mode 'banish)
#+END_SRC

Off
#+BEGIN_SRC emacs-lisp
  (ido-mode -1)
  (global-hl-line-mode -1)
#+END_SRC

*** Hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook       #'rainbow-delimiters-mode-enable)
  (add-hook 'emacs-lisp-mode-hook #'rainbow-mode)
  (add-hook 'conf-mode-hook       #'rainbow-mode)
  (add-hook 'snippet-mode-hook    #'rainbow-delimiters-mode-disable)
  (add-hook 'org-mode-hook        #'smartparens-mode)
#+END_SRC

*** Prettify Symbols

#+BEGIN_SRC emacs-lisp
  (setq-default
   prettify-symbols-alist
   '(("lambda" . (propertize "λ" 'face '(:family "Monospace")))
     ("!=" . "≠")
     ("==" . "⩵")
     ("<=" . "⇚")
     ("=>" . "⇛")
     ("<-" . "⭠")
     ("->" . "⭢")))
  (add-hook 'prog-mode-hook #'prettify-symbols-mode)
#+END_SRC

** Single Settings

Better line numbers
#+BEGIN_SRC emacs-lisp
  (setq linum-format " %d ")
#+END_SRC

Pos Tip colors
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "pos-tip"
    (setq pos-tip-background-color "#2d2d2d"
          pos-tip-foreground-color "#ccb18b"))
#+END_SRC

Pack the custom settings away from the actual config to somewhere they can be easily gitignored.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat (getenv "SPACEMACSDIR") "/custom-file.el"))
#+END_SRC

Simple newlines
#+BEGIN_SRC emacs-lisp
  (setq next-line-add-newlines t)
#+END_SRC

No more ugly line splitting
#+BEGIN_SRC emacs-lisp
  (setq-default truncate-lines t)
#+END_SRC

I'll never want to keep my current tags when switching projects
#+BEGIN_SRC emacs-lisp
  (setq tags-add-tables nil)
#+END_SRC

This final text prevents that the END_SRC face bleeds into the collapsed heading.
